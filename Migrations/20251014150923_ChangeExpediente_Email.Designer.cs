// <auto-generated />
using System;
using BotApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotApp.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20251014150923_ChangeExpediente_Email")]
    partial class ChangeExpediente_Email
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bot")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("BotApp.Models.Denuncia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DatosJson")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc");

                    b.ToTable("Denuncias", "bot");
                });

            modelBuilder.Entity("BotApp.Models.EventLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("ElapsedMs")
                        .HasColumnType("integer");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("text");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type", "CreatedAtUtc");

                    b.ToTable("Events", "bot");
                });

            modelBuilder.Entity("BotApp.Models.Expediente", b =>
                {
                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("DatosJson")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedUtc")
                        .HasColumnType("timestamptz");

                    b.HasKey("Numero");

                    b.HasIndex("LastModifiedUtc");

                    b.ToTable("Expedientes", "bot");
                });

            modelBuilder.Entity("BotApp.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("ChannelMessageId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("text");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SessionId", "CreatedAtUtc");

                    b.ToTable("Messages", "bot");
                });

            modelBuilder.Entity("BotApp.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChannelUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("CxSessionPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActivityUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Channel", "ChannelUserId");

                    b.ToTable("Sessions", "bot");
                });

            modelBuilder.Entity("BotApp.Models.SyncRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Errors")
                        .HasColumnType("integer");

                    b.Property<int>("Inserted")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Updated")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StartedAtUtc");

                    b.ToTable("SyncRuns", "bot");
                });

            modelBuilder.Entity("BotApp.Models.SyncRunError", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SyncRunId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SyncRunId");

                    b.ToTable("SyncRunErrors", "bot");
                });
#pragma warning restore 612, 618
        }
    }
}
